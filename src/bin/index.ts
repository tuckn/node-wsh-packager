#!/usr/bin/env node

import { program } from 'commander';

import { bundleWshFiles } from '../lib/index';

/**
 * Below are the APIs of CLI (Command Line Interface). Some inappropriate titles are used because they are generated by JsDoc.
 *
 * @namespace CLI
 */

/**
 * @function wsh-packager
 * @memberof CLI
 * @example
Usage: wsh-packager bundle [options] <dirPath> <trackingId> [additionalId...]

Insert Google Analytics code (gtag.js) in html files

Options:
  -V, --version                output the version number
  -M, --matched-reg-exp <exp>  RegExp pattern of extensions of file to be inserted. Default.
                               "\.html?$"
  -I, --ignored-reg-exp <exp>  RegExp pattern of file to be exclude. Ex. "[_\-.]cache\d+"
  -N, --indents <number>       Number of indenting white spaces. Default: 4
  -h, --help                   display help for command

// Ex1.
$ npx wsh-packager bundle "D:\MyWshProject"
done

// Ex2.
$ npx wsh-packager bundle "D:\MyWshProject" --job-id "JobName"
done
 */
program
  .command('bundle <dirPath>')
  .version('1.0.0')
  .description('Bundle .wsf jobs defined on Package.wsf.')
  .option('-J, --job-id <string>', 'A Job ID')
  .option('-D, --base-dir <path>', 'A path of base directory')
  .option('-I, --ignore-src <RegExp>', 'Ex. "main\\.js$"')
  .action(async (dirPath, trackingId, additionalId, options) => {
    await bundleWshFiles(dirPath, {
      jobId: options.jobId,
      ignoreSrc: options.ignoreSrc,
      baseDir: options.baseDir,
    });

    process.stdout.write('done');
  });

program.parse(process.argv);
